Bugs.class.php
- __construct($database)
- createBug($bugData)
- updateBug($bugId, $bugData)
- deleteBug($bugId)
- getBugById($bugId)
- getBugsByProject($projectId, $userId)
- getOpenBugsByProject($projectId, $userId)
- getOverdueBugsByProject($projectId, $userId)
- getBugsByAssignedUser($userId)
- getUnassignedBugs($userId)
- getAllBugs($userId)
- getAllOpenBugs($userId)
- assignBug($bugId, $userId)
- unassignBug($bugId)
- closeBug($bugId, $fixDescription)
- canUserViewProjectBugs($userId, $projectId)
- canUserUpdateBug($userId, $bugId)
- getBugsByOwner($ownerId)
- private getUserRole($userId)
- private getUserProject($userId)
- private validateBugData($bugData, $isUpdate)
- private logBugActivity($bugId, $userId, $action, $description)

BugTrackerController.php
- __construct($model)
- setCurrentUser($user)
- getCurrentUser()
- handleLogin($username, $password)
- handleLogout()
- handleDashboard()
- handleCreateBug($bugData)
- handleUpdateBug($bugId, $bugData)
- handleDeleteBug($bugId)
- handleBugList($projectId = null)
- handleBugDetails($bugId)
- handleAssignBug($bugId, $userId)
- handleUpdateBugStatus($bugId, $statusId)
- handleCloseBug($bugId, $fixDescription)
- handleCreateUser($userData)
- handleUpdateUser($userId, $userData)
- handleDeleteUser($userId)
- handleUserList()
- handleUserDetails($userId)
- handleCreateProject($projectData)
- handleUpdateProject($projectId, $projectData)
- handleProjectList()
- handleProjectDetails($projectId)
- handleAssignUserToProject($userId, $projectId)
- handleRemoveUserFromProject($userId, $projectId)
- handleSystemStatistics()
- handleActivityLog()
- validateSession()
- hasPermission($action)
- private sanitizeInput($input)
- private sanitizeBugData($bugData)
- private sanitizeUserData($userData)
- private sanitizeProjectData($projectData)
- private validateBugData($bugData)
- private validateUserData($userData)
- private validateProjectData($projectData)

BugTrackerModel.php
- __construct($host, $database, $username, $password)
- initialize()
- getBugs()
- getUsers()
- loginUser($username, $password)
- logoutUser($userId)
- createBug($bugData, $userId)
- updateBug($bugId, $bugData, $userId)
- deleteBug($bugId, $userId)
- getBugsForUser($userId)
- createUser($userData, $adminId)
- updateUser($userId, $userData, $requesterId)
- deleteUser($userId, $adminId)
- createProject($projectData, $creatorId)
- updateProject($projectId, $projectData, $requesterId)
- getProjectsForUser($userId)
- getAllUsers($adminId)
- assignUserToProject($userId, $projectId, $assignerId)
- removeUserFromProject($userId, $projectId, $removerId)
- assignBugToUser($bugId, $userId, $assignerId)
- getUserDashboard($userId)
- getSystemStatistics($adminId)
- getBugDetails($bugId, $userId)
- getUserDetails($userId, $requesterId)
- getProjectDetails($projectId, $requesterId)
- validateUserPermission($userId)
- logActivity($userId, $action, $description)
- getActivityLog($userId)
- close()
- private getUserStatistics($userId)

BugTrackerRouter.php
- __construct($controller)
- setCurrentUser($user)
- getCurrentUser()
- route($action, $params = [])
- routeToLogin()
- routeToAdmin()
- routeToBugTracker($params = [])
- routeToSystemStatistics()
- routeToActivityLog()
- routeToUnauthorized()
- getAvailableRoutes()
- redirect($route, $params = [])
- parseUrl($url)
- private initializeRoutes()
- private logRouteAccess($route, $params = [])
- private handleLogin($params)
- private handleLogout()
- private handleDashboard()
- private handleCreateBug($params)
- private handleUpdateBug($params)
- private handleDeleteBug($params)
- private handleBugList($params)
- private handleBugDetails($params)
- private handleAssignBug($params)
- private handleUpdateBugStatus($params)
- private handleCloseBug($params)
- private handleCreateUser($params)
- private handleUpdateUser($params)
- private handleDeleteUser($params)
- private handleUserList()
- private handleUserDetails($params)
- private handleCreateProject($params)
- private handleUpdateProject($params)
- private handleProjectList()
- private handleProjectDetails($params)
- private handleAssignUserToProject($params)
- private handleRemoveUserFromProject($params)
- private handleSystemStatistics()
- private handleActivityLog()
- private getAdminData()
- private getBugTrackerData($params)
- private getSystemStatisticsData()
- private getActivityLogData()
- private buildUrl($route, $params = [])

Database.class.php
- __construct($host, $database, $username, $password)
- connect()
- disconnect()
- prepare($query, $params = [])
- select($query, $params = [])
- insert($query, $params = [])
- update($query, $params = [])
- delete($query, $params = [])
- rowCount()
- execute($query)
- isConnected()
- getConnection()

index.php
- (Procedural entry point; no class methods. Contains application bootstrap and routing logic.)

project.txt
- (empty)

README.md
- (documentation; no methods)

rubric.txt
- (empty)

setup_database.sql
- (SQL schema/setup script; no methods)

BugTracker.sql
- (SQL schema; no methods)

Users.class.php
- __construct($database)
- createUser($userData, $adminId)
- updateUser($userId, $userData, $requesterId)
- deleteUser($userId, $adminId)
- getUserById($userId)
- getAllUsers($adminId)
- authenticate($username, $password)
- hashPassword($password)
- verifyPassword($password, $hash)
- getUserRole($userId)
- isAdmin($userId)
- isManager($userId)
- isRegularUser($userId)
- assignUserToProject($userId, $projectId)
- removeUserFromProject($userId, $projectId)
- getUserProject($userId)
- createProject($projectData, $creatorId)
- updateProject($projectId, $projectData, $requesterId)
- getProjectById($projectId)
- getAllProjects($requesterId)
- canCreateProjects($userId)
- canViewAllProjects($userId)
- validateUserData($userData, $isUpdate)
- validateProjectData($projectData, $isUpdate)
- removeUserFromAllAssignments($userId)
- getUserActivityLog($userId)
- logUserActivity($userId, $action, $description)

views/AdminView.php
- JavaScript functions: showUserForm(), hideUserForm(), showProjectForm(), hideProjectForm()
- (PHP/HTML template; no backend methods)

views/BugTrackerView.php
- (PHP/HTML template; no backend methods)

views/LoginView.php
- (PHP/HTML template; no backend methods)

views/LogView.php
- (PHP/HTML template; no backend methods)

views/UnauthorizedView.php
- (PHP/HTML template; no backend methods)

Notes:
- I skipped the PDF file `BugTrackerSystemsArchitecture.pdf` (binary) since it doesn't contain code methods.
- For templated views I listed any small JS helpers found but did not treat them as PHP "methods."